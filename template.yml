AWSTemplateFormatVersion: 2010-09-09
Description: Build Step Functions to deploy a Personalize Campaign
# Optimize Amazon Personalize Campaigns using Amazon Pinpoint Events

Parameters:
  Test:
    Type: String
    Description: More to come surely


Resources:

  DataS3Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W51
            reason: Not public facing.
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LoggingConfiguration:
        DestinationBucketName: !Ref LogBucket
        LogFilePrefix: personalize-car-campaign/

  LogBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W35
            reason: This is the log bucket.
    Properties:
      AccessControl: LogDeliveryWrite
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
  LogBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref LogBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
        - Sid: AWSCloudTrailAclCheck
          Effect: Allow
          Principal:
            Service: cloudtrail.amazonaws.com
          Action: "s3:GetBucketAcl"
          Resource: !Sub arn:aws:s3:::${LogBucket}
        - Sid: AWSCloudTrailWrite
          Effect: Allow
          Principal:
            Service: cloudtrail.amazonaws.com
          Action: "s3:PutObject"
          Resource: !Sub arn:aws:s3:::${LogBucket}/AWSLogs/${AWS::AccountId}/*
          Condition:
            StringEquals:
              "s3:x-amz-acl": "bucket-owner-full-control"

  CreateDatasetGroupLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.lambda_handler
      Role: !GetAtt CreateDatasetGroupLambdaRole.Arn
      Runtime: "python3.7"
      Timeout: 60
      Environment:
        Variables:
          DATASET_GROUP_NAME: "car-dg"
      Code:
        ZipFile: |
          import boto3
          import os

          personalize = boto3.client('personalize')

          def lambda_handler(event, context):
            response = personalize.create_dataset_group(
              name = os.environ.get('DATASET_GROUP_NAME')
            )

            return {
              'DatasetGroupArn': response['datasetGroupArn']
            }

  CreateDatasetGroupStatusLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.lambda_handler
      Role: !GetAtt CreateDatasetGroupStatusLambdaRole.Arn
      Runtime: "python3.7"
      Timeout: 60
      Environment:
        Variables:
          SOMETHING: ELSE
      Code:
        ZipFile: |
          import boto3

          personalize = boto3.client('personalize')

          def lambda_handler(event, context):

            dataset_group_arn = event['DatasetGroupArn']

            response = personalize.describe_dataset_group(
              datasetGroupArn = dataset_group_arn
            )

            return {
              'DatasetGroupArn': dataset_group_arn,
              'DatasetGroupStatus': response['datasetGroup']['status']
            }

  CreateDatasetLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.lambda_handler
      Role: !GetAtt CreateDatasetLambdaRole.Arn
      Runtime: "python3.7"
      Timeout: 60
      Environment:
        Variables:
          SOURCE_FILE_BASE_URL: "https://raw.githubusercontent.com/Ryanjlowe/Personalize-car-campaign/master/schemas"
      Code:
        ZipFile: |
          import boto3
          import os
          import json
          from urllib.request import urlopen

          personalize = boto3.client('personalize')

          def lambda_handler(event, context):

            json_url = urlopen(os.environ.get('SOURCE_FILE_BASE_URL') + '/' + event['SchemaJSON'] + '.json')
            json_schema = json.loads(json_url.read())

            schema_response = personalize.create_schema(
              name = event['SchemaName'],
              schema = json_schema
            )

            create_response = personalize.create_dataset(
              name = event['DatasetName'],
              datasetType = event['DatasetType'],
              datasetGroupArn = event['DatasetGroupArn'],
              schemaArn = schema_response['schemaArn']
            )

            return {
              'DatasetGroupArn': event['DatasetGroupArn'],
              'DatasetArn': create_response['datasetArn']
            }

  CreateDatasetStatusLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.lambda_handler
      Role: !GetAtt CreateDatasetStatusLambdaRole.Arn
      Runtime: "python3.7"
      Timeout: 60
      Environment:
        Variables:
          SOMETHING: ELSE
      Code:
        ZipFile: |
          import boto3

          personalize = boto3.client('personalize')

          def lambda_handler(event, context):

            response = personalize.describe_dataset(
              datasetArn = event['DatasetArn']
            )

            return {
              'DatasetStatus': response['dataset']['status'],
              'DatasetGroupArn': event['DatasetGroupArn'],
              'DatasetArn': event['DatasetArn']
            }

  DataSetImportLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.lambda_handler
      Role: !GetAtt DataSetImportLambdaRole.Arn
      Runtime: "python3.7"
      Timeout: 60
      Environment:
        Variables:
          IMPORT_ROLE: !GetAtt PersonalizeDatasetImportRole.Arn
          S3_BUCKET: !Ref DataS3Bucket
      Code:
        ZipFile: |
          import boto3
          import os

          personalize = boto3.client('personalize')

          def lambda_handler(event, context):

            response = personalize.create_dataset_import_job(
              jobName = event['ImportCSVFile'] + '-importjob-' + event['DatasetGroupArn'],
              datasetArn = event['DatasetGroupArn'],
              dataSource = {
                'dataLocation': 's3://' + process.env.SOLUTION_BUCKET + '/' + event['ImportCSVFile'] + '.csv'
              },
              roleArn: os.environ.get('IMPORT_ROLE')
            )


            return {
              'DatasetGroupArn': event['DatasetGroupArn'],
              'DatasetArn': event['DatasetArn'],
              'DatasetImportJobArn': response['datasetImportJobArn']
            }

  DataSetImportStatusLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.lambda_handler
      Role: !GetAtt DataSetImportStatusLambdaRole.Arn
      Runtime: "python3.7"
      Timeout: 60
      Environment:
        Variables:
          SOMETHING: ELSE
      Code:
        ZipFile: |
          import boto3

          personalize = boto3.client('personalize')

          def lambda_handler(event, context):

            response = personalize.describe_dataset_import_job(
              datasetImportJobArn = event['DatasetImportJobArn']
            )

            return {
              'DatasetGroupArn': event['DatasetGroupArn'],
              'DatasetArn': event['DatasetArn'],
              'DatasetImportJobArn': event['DatasetImportJobArn'],
              'DatasetImportJobStatus': response['datasetImportJob']['status']
            }

  CreateSolutionLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.lambda_handler
      Role: !GetAtt CreateSolutionLambdaRole.Arn
      Runtime: "python3.7"
      Timeout: 60
      Environment:
        Variables:
          SOLUTION_NAME: "car-hrnn"
      Code:
        ZipFile: |
          import boto3
          import os

          personalize = boto3.client('personalize')

          def lambda_handler(event, context):

            response = personalize.create_solution(
              name = os.environ.get('SOLUTION_NAME'),
              datasetGroupArn = event['DatasetGroupArn'],
              recipeArn = 'arn:aws:personalize:::recipe/aws-hrnn'
            )

            return {
              'DatasetGroupArn': event['DatasetGroupArn'],
              'DatasetArn': event['DatasetArn'],
              'DatasetImportJobArn': event['DatasetImportJobArn'],
              'SolutionArn': response['solutionArn']
            }

  CreateSolutionStatusLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.lambda_handler
      Role: !GetAtt CreateSolutionStatusLambdaRole.Arn
      Runtime: "python3.7"
      Timeout: 60
      Environment:
        Variables:
          SOMETHING: ELSE
      Code:
        ZipFile: |
          import boto3

          personalize = boto3.client('personalize')

          def lambda_handler(event, context):

            response = personalize.describe_solution(
              solutionArn = event['SolutionArn']
            )

            return {
              'DatasetGroupArn': event['DatasetGroupArn'],
              'DatasetArn': event['DatasetArn'],
              'DatasetImportJobArn': event['DatasetImportJobArn'],
              'SolutionArn': event['SolutionArn'],
              'SolutionStatus': event['solution']['status']
            }

  CreateSolutionVersionLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.lambda_handler
      Role: !GetAtt CreateSolutionVersionLambdaRole.Arn
      Runtime: "python3.7"
      Timeout: 60
      Environment:
        Variables:
          SOMETHING: ELSE
      Code:
        ZipFile: |
          import boto3

          personalize = boto3.client('personalize')

          def lambda_handler(event, context):

            response = personalize.create_solution_version(
              solutionArn = event['SolutionArn']
            )

            return {
              'DatasetGroupArn': event['DatasetGroupArn'],
              'DatasetArn': event['DatasetArn'],
              'DatasetImportJobArn': event['DatasetImportJobArn'],
              'SolutionArn': event['SolutionArn'],
              'SolutionVersionArn': response['solutionVersionArn']
            }

  CreateSolutionVersionStatusLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.lambda_handler
      Role: !GetAtt CreateSolutionVersionStatusLambdaRole.Arn
      Runtime: "python3.7"
      Timeout: 60
      Environment:
        Variables:
          SOMETHING: ELSE
      Code:
        ZipFile: |
          import boto3

          personalize = boto3.client('personalize')

          def lambda_handler(event, context):

            response = personalize.describe_solution_version(
              solutionVersionArn = event['SolutionVersionArn']
            )

            return {
              'DatasetGroupArn': event['DatasetGroupArn'],
              'DatasetArn': event['DatasetArn'],
              'DatasetImportJobArn': event['DatasetImportJobArn'],
              'SolutionArn': event['SolutionArn'],
              'SolutionVersionArn': event['SolutionVersionArn'],
              'SolutionVersionStatus': response['solutionVersion']['status']
            }



  CreateCampaignLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.lambda_handler
      Role: !GetAtt CreateCampaignLambdaRole.Arn
      Runtime: "python3.7"
      Timeout: 60
      Environment:
        Variables:
          MIN_PROVISIONED_TPS: 1
          CAMPAIGN_NAME: "car-hrnn"
      Code:
        ZipFile: |
          import boto3
          import os

          personalize = boto3.client('personalize')

          def lambda_handler(event, context):

            response = personalize.create_campaign(
              name = os.environ.get('CAMPAIGN_NAME'),
              solutionVersionArn = event['SolutionVersionArn'],
              minProvisionedTPS = os.environ.get('MIN_PROVISIONED_TPS')
            )

            return {
              'DatasetGroupArn': event['DatasetGroupArn'],
              'DatasetArn': event['DatasetArn'],
              'DatasetImportJobArn': event['DatasetImportJobArn'],
              'SolutionArn': event['SolutionArn'],
              'SolutionVersionArn': event['SolutionVersionArn'],
              'CampaignArn': response['campaignArn']
            }

  CreateCampaignStatusLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.lambda_handler
      Role: !GetAtt CreateCampaignStatusLambdaRole.Arn
      Runtime: "python3.7"
      Timeout: 60
      Environment:
        Variables:
          SOMETHING: ELSE
      Code:
        ZipFile: |
          import boto3

          personalize = boto3.client('personalize')

          def lambda_handler(event, context):

            response = personalize.describe_campaign(
              campaignArn = event['CampaignArn']
            )

            return {
              'DatasetGroupArn': event['DatasetGroupArn'],
              'DatasetArn': event['DatasetArn'],
              'DatasetImportJobArn': event['DatasetImportJobArn'],
              'SolutionArn': event['SolutionArn'],
              'SolutionVersionArn': event['SolutionVersionArn'],
              'CampaignArn': event['CampaignArn']
              'CampaignStatus': response['campaign']['status']
            }


  PersonalizeCampaignStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      RoleArn: !GetAtt PersonalizeCampaignStateMachineRole.Arn
      DefinitionString:
        !Sub
          - |-
            {
              "StartAt": "CreateDatasetGroup",
              "States": {
                "CreateDatasetGroup": {
                  "Type": "Task",
                  "Resource": "${CreateDatasetGroupLambdaArn}",
                  "Next": "DatasetGroupWait"
                },
                "DatasetGroupWait": {
                  "Type": "Wait",
                  "Seconds": 30,
                  "Next": "DatasetGroupStatus"
                },
                "DatasetGroupStatus": {
                  "Type": "Task",
                  "Resource": "${CreateDatasetGroupStatusLambdaArn}",
                  "Next": "IsDatasetGroupFinished"
                },
                "IsDatasetGroupFinished": {
                  "Type": "Choice",
                  "Default": "DatasetGroupWait",
                  "Choices": [
                    {
                      "Variable": "$.DatasetGroupStatus",
                      "StringEquals": "CREATE FAILED",
                      "Next": "DatasetGroupFailed"
                    },
                    {
                      "Variable": "$.DatasetGroupStatus",
                      "StringEquals": "ACTIVE",
                      "Next": "ParallelDatasets"
                    }
                  ]
                },
                "DatasetGroupFailed": {
                  "Type": "Fail",
                  "Cause": "Create Dataset Group failed",
                  "Error": "Create Dataset Group failed"
                },
                "ParallelDatasets": {
                  "Type": "Parallel",
                  "Next": "ParallelCampaigns",
                  "Branches": [
                    {
                      "StartAt": "CreateUserDataset",
                      "States": {
                        "CreateUserDataset": {
                          "Type": "Task",
                          "Resource": "${CreateDatasetLambdaArn}",
                          "Parameters": {"SchemaName": "car-users-schema", "SchemaJSON": "users", "DatasetName": "car-users", "DatasetType": "USERS"},
                          "Next": "IsUserDatasetFinished"
                        },
                        "UserDatasetWait": {
                          "Type": "Wait",
                          "Seconds": 30,
                          "Next": "UserDataSetStatus"
                        },
                        "UserDataSetStatus": {
                          "Type": "Task",
                          "Resource": "${CreateDatasetStatusLambdaArn}",
                          "Next": "IsUserDatasetFinished"
                        },
                        "IsUserDatasetFinished": {
                          "Type": "Choice",
                          "Default": "UserDatasetWait",
                          "Choices": [
                            {
                              "Variable": "$.DatasetStatus",
                              "StringEquals": "CREATE FAILED",
                              "Next": "UserDatasetFailed"
                            },
                            {
                              "Variable": "$.DatasetStatus",
                              "StringEquals": "ACTIVE",
                              "Next": "UserDatasetImport"
                            }
                          ]
                        },
                        "UserDatasetFailed": {
                          "Type": "Fail",
                          "Cause": "User Dataset failed",
                          "Error": "User Dataset failed"
                        },
                        "UserDatasetImport": {
                          "Type": "Task",
                          "Resource": "${DataSetImportLambdaArn}",
                          "Parameters": {"ImportCSVFile": "users"},
                          "Next": "UserImportWait"
                        },
                        "UserImportWait": {
                          "Type": "Wait",
                          "Seconds": 30,
                          "Next": "UserImportStatus"
                        },
                        "UserImportStatus": {
                          "Type": "Task",
                          "Resource": "${DataSetImportStatusLambdaArn}",
                          "Next": "IsUserImportFinished"
                        },
                        "IsUserImportFinished": {
                          "Type": "Choice",
                          "Default": "UserImportWait",
                          "Choices": [
                            {
                              "Variable": "$.DatasetImportJobStatus",
                              "StringEquals": "CREATE FAILED",
                              "Next": "UserImportFailed"
                            },
                            {
                              "Variable": "$.DatasetImportJobStatus",
                              "StringEquals": "ACTIVE",
                              "Next": "UserDatasetEnd"
                            }
                          ]
                        },
                        "UserImportFailed": {
                          "Type": "Fail",
                          "Cause": "User Dataset Import failed",
                          "Error": "User Dataset Import failed"
                        },
                        "UserDatasetEnd": {
                          "Type": "Pass",
                          "End": true
                        }
                      }
                    },
                    {
                      "StartAt": "CreateInteractionDataset",
                      "States": {
                        "CreateInteractionDataset": {
                          "Type": "Task",
                          "Resource": "${CreateDatasetLambdaArn}",
                          "Parameters": {"SchemaName": "car-interactions-schema", "SchemaJSON": "interactions", "DatasetName": "car-interactions", "DatasetType": "INTERACTIONS"},
                          "Next": "IsInteractionDatasetFinished"
                        },
                        "InteractionDatasetWait": {
                          "Type": "Wait",
                          "Seconds": 30,
                          "Next": "InteractionDataSetStatus"
                        },
                        "InteractionDataSetStatus": {
                          "Type": "Task",
                          "Resource": "${CreateDatasetStatusLambdaArn}",
                          "Next": "IsInteractionDatasetFinished"
                        },
                        "IsInteractionDatasetFinished": {
                          "Type": "Choice",
                          "Default": "InteractionDatasetWait",
                          "Choices": [
                            {
                              "Variable": "$.DatasetStatus",
                              "StringEquals": "CREATE FAILED",
                              "Next": "InteractionDatasetFailed"
                            },
                            {
                              "Variable": "$.DatasetStatus",
                              "StringEquals": "ACTIVE",
                              "Next": "InteractionDatasetImport"
                            }
                          ]
                        },
                        "InteractionDatasetFailed": {
                          "Type": "Fail",
                          "Cause": "Interaction Dataset failed",
                          "Error": "Interaction Dataset failed"
                        },
                        "InteractionDatasetImport": {
                          "Type": "Task",
                          "Resource": "${DataSetImportLambdaArn}",
                          "Parameters": {"ImportCSVFile": "interactions"},
                          "Next": "InteractionImportWait"
                        },
                        "InteractionImportWait": {
                          "Type": "Wait",
                          "Seconds": 30,
                          "Next": "InteractionImportStatus"
                        },
                        "InteractionImportStatus": {
                          "Type": "Task",
                          "Resource": "${DataSetImportStatusLambdaArn}",
                          "Next": "IsInteractionImportFinished"
                        },
                        "IsInteractionImportFinished": {
                          "Type": "Choice",
                          "Default": "InteractionImportWait",
                          "Choices": [
                            {
                              "Variable": "$.DatasetImportJobStatus",
                              "StringEquals": "CREATE FAILED",
                              "Next": "InteractionImportFailed"
                            },
                            {
                              "Variable": "$.DatasetImportJobStatus",
                              "StringEquals": "ACTIVE",
                              "Next": "InteractionDatasetEnd"
                            }
                          ]
                        },
                        "InteractionImportFailed": {
                          "Type": "Fail",
                          "Cause": "Interaction Dataset Import failed",
                          "Error": "Interaction Dataset Import failed"
                        },
                        "InteractionDatasetEnd": {
                          "Type": "Pass",
                          "End": true
                        }
                      }
                    },
                    {
                      "StartAt": "CreateItemDataset",
                       "States": {
                        "CreateItemDataset": {
                          "Type": "Task",
                          "Resource": "${CreateDatasetLambdaArn}",
                          "Parameters": {"SchemaName": "car-items-schema", "SchemaJSON": "car_items", "DatasetName": "car-items", "DatasetType": "ITEMS"},
                          "Next": "IsItemDatasetFinished"
                        },
                        "ItemDatasetWait": {
                          "Type": "Wait",
                          "Seconds": 30,
                          "Next": "ItemDataSetStatus"
                        },
                        "ItemDataSetStatus": {
                          "Type": "Task",
                          "Resource": "${CreateDatasetStatusLambdaArn}",
                          "Next": "IsItemDatasetFinished"
                        },
                        "IsItemDatasetFinished": {
                          "Type": "Choice",
                          "Default": "ItemDatasetWait",
                          "Choices": [
                            {
                              "Variable": "$.DatasetStatus",
                              "StringEquals": "CREATE FAILED",
                              "Next": "ItemDatasetFailed"
                            },
                            {
                              "Variable": "$.DatasetStatus",
                              "StringEquals": "ACTIVE",
                              "Next": "ItemDatasetImport"
                            }
                          ]
                        },
                        "ItemDatasetFailed": {
                          "Type": "Fail",
                          "Cause": "Item Dataset failed",
                          "Error": "Item Dataset failed"
                        },
                         "ItemDatasetImport": {
                          "Type": "Task",
                          "Resource": "${DataSetImportLambdaArn}",
                          "Parameters": {"ImportCSVFile": "car_items"},
                          "Next": "ItemImportWait"
                        },
                        "ItemImportWait": {
                          "Type": "Wait",
                          "Seconds": 30,
                          "Next": "ItemImportStatus"
                        },
                        "ItemImportStatus": {
                          "Type": "Task",
                          "Resource": "${DataSetImportStatusLambdaArn}",
                          "Next": "IsItemImportFinished"
                        },
                        "IsItemImportFinished": {
                          "Type": "Choice",
                          "Default": "ItemImportWait",
                          "Choices": [
                            {
                              "Variable": "$.DatasetImportJobStatus",
                              "StringEquals": "CREATE FAILED",
                              "Next": "ItemImportFailed"
                            },
                            {
                              "Variable": "$.DatasetImportJobStatus",
                              "StringEquals": "ACTIVE",
                              "Next": "ItemDatasetEnd"
                            }
                          ]
                        },
                        "ItemImportFailed": {
                          "Type": "Fail",
                          "Cause": "Item Dataset Import failed",
                          "Error": "Item Dataset Import failed"
                        },
                        "ItemDatasetEnd": {
                          "Type": "Pass",
                          "End": true
                        }
                      }
                    }
                  ]
                },



                "ParallelCampaigns": {
                  "Type": "Parallel",
                  "Next": "something",
                  "Branches": [
                    {
                      "StartAt": "CreateSolution",
                      "States": {
                        "CreateSolution": {
                          "Type": "Task",
                          "Resource": "${CreateSolutionLambdaArn}",
                          "Next": "IsSolutionFinished"
                        },
                        "SolutionWait": {
                          "Type": "Wait",
                          "Seconds": 30,
                          "Next": "SolutionStatus"
                        },
                        "SolutionStatus": {
                          "Type": "Task",
                          "Resource": "${CreateSolutionStatusLambdaArn}",
                          "Next": "IsSolutionFinished"
                        },
                        "IsSolutionFinished": {
                          "Type": "Choice",
                          "Default": "SolutionWait",
                          "Choices": [
                            {
                              "Variable": "$.SolutionStatus",
                              "StringEquals": "FAILED",
                              "Next": "SolutionFailed"
                            },
                            {
                              "Variable": "$.SolutionStatus",
                              "StringEquals": "COMPLETED",
                              "Next": "CreateSolutionVersion"
                            }
                          ]
                        },
                        "SolutionFailed": {
                          "Type": "Fail",
                          "Cause": "Solution failed",
                          "Error": "Solution failed"
                        },



                        "CreateSolutionVersion": {
                          "Type": "Task",
                          "Resource": "${CreateSolutionVersionLambdaArn}",
                          "Next": "IsSolutionVersionFinished"
                        },
                        "SolutionVersionWait": {
                          "Type": "Wait",
                          "Seconds": 30,
                          "Next": "SolutionVersionStatus"
                        },
                        "SolutionVersionStatus": {
                          "Type": "Task",
                          "Resource": "${CreateSolutionVersionStatusLambdaArn}",
                          "Next": "IsSolutionVersionFinished"
                        },
                        "IsSolutionVersionFinished": {
                          "Type": "Choice",
                          "Default": "SolutionVersionWait",
                          "Choices": [
                            {
                              "Variable": "$.SolutionVersionStatus",
                              "StringEquals": "FAILED",
                              "Next": "SolutionVersionFailed"
                            },
                            {
                              "Variable": "$.SolutionVersionStatus",
                              "StringEquals": "COMPLETED",
                              "Next": "SolutionCampaign"
                            }
                          ]
                        },
                        "SolutionVersionFailed": {
                          "Type": "Fail",
                          "Cause": "Solution Version failed",
                          "Error": "Solution Version failed"
                        },




                        "SolutionCampaign": {
                          "Type": "Task",
                          "Resource": "${CreateCampaignLambdaArn}",
                          "Next": "CampaignWait"
                        },
                        "CampaignWait": {
                          "Type": "Wait",
                          "Seconds": 30,
                          "Next": "CampaignStatus"
                        },
                        "CampaignStatus": {
                          "Type": "Task",
                          "Resource": "${CreateCampaignStatusLambdaArn}",
                          "Next": "IsCampaignFinished"
                        },
                        "IsCampaignFinished": {
                          "Type": "Choice",
                          "Default": "CampaignWait",
                          "Choices": [
                            {
                              "Variable": "$.CampaignStatus",
                              "StringEquals": "FAILED",
                              "Next": "CampaignFailed"
                            },
                            {
                              "Variable": "$.CampaignStatus",
                              "StringEquals": "COMPLETED",
                              "Next": "CampaignEnd"
                            }
                          ]
                        },
                        "CampaignFailed": {
                          "Type": "Fail",
                          "Cause": "Campaign failed",
                          "Error": "Campaign failed"
                        },
                        "CampaignEnd": {
                          "Type": "Pass",
                          "End": true
                        }
                      }
                    }
                  ]
                },
                "something": {
                  "Type": "Pass",
                  "End": true
                }
              }
            }
          - {CreateDatasetGroupLambdaArn: !GetAtt CreateDatasetGroupLambda.Arn, CreateDatasetGroupStatusLambdaArn: !GetAtt CreateDatasetGroupStatusLambda.Arn, CreateDatasetLambdaArn: !GetAtt CreateDatasetLambda.Arn, CreateDatasetStatusLambdaArn: !GetAtt CreateDatasetStatusLambda.Arn, DataSetImportLambdaArn: !GetAtt DataSetImportLambda.Arn, DataSetImportStatusLambdaArn: !GetAtt DataSetImportStatusLambda.Arn, CreateSolutionLambdaArn: !GetAtt CreateSolutionLambda.Arn, CreateSolutionStatusLambdaArn: !GetAtt CreateSolutionStatusLambda.Arn, CreateCampaignLambda: !GetAtt CreateCampaignLambda.Arn, CreateSolutionVersionLambdaArn: !GetAtt CreateSolutionVersionLambda.Arn, CreateSolutionVersionStatusLambdaArn: !GetAtt CreateSolutionVersionStatusLambda.Arn, CreateCampaignLambdaArn: !GetAtt CreateCampaignLambda.Arn, CreateCampaignStatusLambdaArn: !GetAtt CreateCampaignStatusLambda.Arn}


  PersonalizeCampaignStateMachineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "states.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSGlueServiceRole"
      Policies:
        -
          PolicyName: "root"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action: "lambda:InvokeFunction"
                Resource:
                  - !GetAtt CreateDatasetGroupLambda.Arn
                  - !GetAtt CreateDatasetGroupStatusLambda.Arn
                  - !GetAtt CreateDatasetLambda.Arn
                  - !GetAtt CreateDatasetStatusLambda.Arn
                  - !GetAtt DataSetImportLambda.Arn
                  - !GetAtt DataSetImportStatusLambda.Arn
                  - !GetAtt CreateSolutionLambda.Arn
                  - !GetAtt CreateSolutionStatusLambda.Arn
                  - !GetAtt CreateCampaignLambda.Arn
                  - !GetAtt CreateCampaignStatusLambda.Arn



  CreateDatasetGroupLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: "/"
      Policies:
        -
          PolicyName: "root"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"
              -
                Effect: "Allow"
                Action:
                  - "personalize:CreateDatasetGroup"
                Resource:
                  - "*"

  CreateDatasetGroupStatusLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: "/"
      Policies:
        -
          PolicyName: "root"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"
              -
                Effect: "Allow"
                Action:
                  - "personalize:DescribeDatasetGroup"
                Resource: !Sub "arn:aws:personalize:${AWS::Region}:${AWS::AccountId}:dataset-group/*"

  CreateDatasetLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: "/"
      Policies:
        -
          PolicyName: "root"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"
              -
                Effect: "Allow"
                Action:
                  - "personalize:CreateDataset"
                Resource:
                  - !Sub "arn:aws:personalize:${AWS::Region}:${AWS::AccountId}:dataset-group/*"
                  - !Sub "arn:aws:personalize:${AWS::Region}:${AWS::AccountId}:schema/*"

  CreateDatasetStatusLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: "/"
      Policies:
        -
          PolicyName: "root"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"
              -
                Effect: "Allow"
                Action:
                  - "personalize:DescribeDataset"
                Resource: !Sub "arn:aws:personalize:${AWS::Region}:${AWS::AccountId}:dataset/*"

  DataSetImportLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: "/"
      Policies:
        -
          PolicyName: "root"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"
              -
                Effect: "Allow"
                Action:
                  - "personalize:CreateDatasetImportJob"
                Resource: !Sub "arn:aws:personalize:${AWS::Region}:${AWS::AccountId}:dataset/*"
              -
                Effect: "Allow"
                Action: "iam:PassRole"
                Resource:
                  - !GetAtt PersonalizeDatasetImportRole.Arn

  DataSetImportStatusLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: "/"
      Policies:
        -
          PolicyName: "root"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"
              -
                Effect: "Allow"
                Action:
                  - "personalize:DescribeDatasetImportJob"
                Resource: !Sub "arn:aws:personalize:${AWS::Region}:${AWS::AccountId}:dataset-import-job/*"

  CreateSolutionLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: "/"
      Policies:
        -
          PolicyName: "root"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"
              -
                Effect: "Allow"
                Action:
                  - "personalize:CreateSolution"
                Resource:
                  - !Sub "arn:aws:personalize:${AWS::Region}:${AWS::AccountId}:dataset-group/*"
                  - !Sub "arn:aws:personalize:${AWS::Region}:${AWS::AccountId}:recipe/*"

  CreateSolutionStatusLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: "/"
      Policies:
        -
          PolicyName: "root"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"
              -
                Effect: "Allow"
                Action:
                  - "personalize:DescribeSolution"
                Resource: !Sub "arn:aws:personalize:${AWS::Region}:${AWS::AccountId}:solution/*"

  CreateSolutionVersionLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: "/"
      Policies:
        -
          PolicyName: "root"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"
              -
                Effect: "Allow"
                Action:
                  - "personalize:CreateSolutionVersion"
                Resource: !Sub "arn:aws:personalize:${AWS::Region}:${AWS::AccountId}:solution/*"

  CreateSolutionVersionStatusLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: "/"
      Policies:
        -
          PolicyName: "root"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"
              -
                Effect: "Allow"
                Action:
                  - "personalize:DescribeSolutionVersion"
                Resource: !Sub "arn:aws:personalize:${AWS::Region}:${AWS::AccountId}:solution-version/*"

  CreateCampaignLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: "/"
      Policies:
        -
          PolicyName: "root"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"
              -
                Effect: "Allow"
                Action:
                  - "personalize:CreateCampaign"
                Resource: !Sub "arn:aws:personalize:${AWS::Region}:${AWS::AccountId}:solution-version/*"

  CreateCampaignStatusLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: "/"
      Policies:
        -
          PolicyName: "root"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"
              -
                Effect: "Allow"
                Action:
                  - "personalize:DescribeCampaign"
                Resource: !Sub "arn:aws:personalize:${AWS::Region}:${AWS::AccountId}:campaign/*"

  PersonalizeDatasetImportRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - personalize.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: "/"
      Policies:
        -
          PolicyName: "root"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action:
                  - s3:GetObject
                  - s3:ListBucket
                Resource:
                  - !Sub "arn:aws:s3:::${DataS3Bucket}"
                  - !Sub "arn:aws:s3:::${DataS3Bucket}/*"

#####

  SetupSampleFiles:
    Type: Custom::LoadLambda
    Properties:
      ServiceToken: !GetAtt CustomResourceHelper.Arn
      CustomResourceAction: SetupSampleFiles

  CustomResourceHelper:
    Type: AWS::Lambda::Function
    Properties:
      Environment:
        Variables:
          SOURCE_FILE_BASE_URL: "https://raw.githubusercontent.com/Ryanjlowe/Personalize-car-campaign/master/sample_data"
          S3_DATA_BUCKET: !Ref DataS3Bucket
      Description: Helps set up the solution.
      Handler: index.handler
      MemorySize: 256
      Role: !GetAtt CustomResourceHelperRole.Arn
      Runtime: nodejs12.x
      Timeout: 300
      Code:
        ZipFile: |
          const AWS = require('aws-sdk');
          const fs = require("fs");
          const https = require("https");
          const stream = require('stream');
          const url = require('url');
          const crypto = require("crypto");

          AWS.config.update({
            region: process.env.AWS_REGION
          });

          const s3 = new AWS.S3();

          const uuidv4 = function() {
            return ([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g, c =>
              (c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16)
            );
          };

          const transferFile = function(source, destKey) {

            var url = `${process.env.SOURCE_FILE_BASE_URL}/${source}`;

            var pass = new stream.PassThrough();
            const p1 = s3.upload({
              Bucket: process.env.S3_DATA_BUCKET,
              Key: destKey,
              Body: pass
            }).promise();

            var p2 = new Promise((resolve, reject) => {
                https.get(url, response => {
                    response.pipe(pass)
                        .on("finish", function() {
                          resolve();
                        });
                });
            });

            return Promise.all([p1, p2]);
          };

          exports.handler = (event, context, callback) => {

            let responseStatus = 'FAILED';
            let responseData = {};

            if (event.ResourceProperties.CustomResourceAction === 'GenerateUUID') {

                responseStatus = 'SUCCESS';
                responseData = {
                    UUID: uuidv4()
                };
                sendResponse(event, callback, context.logStreamName, responseStatus, responseData);

            } else if (event.ResourceProperties.CustomResourceAction === 'SetupSampleFiles') {

                Promise.all([
                        transferFile('car_items.csv', 'car_items.csv'),
                        transferFile('interactions.csv', 'interactions.csv'),
                        transferFile('users.csv', 'users.csv')
                    ])
                    .then((results) => {
                      responseStatus = 'SUCCESS';
                      responseData = {
                          success: true
                      };
                      sendResponse(event, callback, context.logStreamName, responseStatus, responseData);

                    })
                    .catch((results) => {

                      console.log('Received Error: ' + JSON.stringify(results));

                      responseStatus = 'FAILED';
                      responseData = {
                          success: false
                      };
                      sendResponse(event, callback, context.logStreamName, responseStatus, responseData);

                    });
            }
          };

          /**
          * Sends a response to the pre-signed S3 URL
          */
          let sendResponse = function(event, callback, logStreamName, responseStatus, responseData) {
            const responseBody = JSON.stringify({
                Status: responseStatus,
                Reason: `See the details in CloudWatch Log Stream: ${logStreamName}`,
                PhysicalResourceId: logStreamName,
                StackId: event.StackId,
                RequestId: event.RequestId,
                LogicalResourceId: event.LogicalResourceId,
                Data: responseData,
            });

            console.log('RESPONSE BODY:\n', responseBody);
            const parsedUrl = url.parse(event.ResponseURL);
            const options = {
                hostname: parsedUrl.hostname,
                port: 443,
                path: parsedUrl.path,
                method: 'PUT',
                headers: {
                    'Content-Type': '',
                    'Content-Length': responseBody.length,
                }
            };

            const req = https.request(options, (res) => {
                console.log('STATUS:', res.statusCode);
                console.log('HEADERS:', JSON.stringify(res.headers));
                callback(null, 'Successfully sent stack response!');
            });

            req.on('error', (err) => {
                console.log('sendResponse Error:\n', err);
                callback(err);
            });

            req.write(responseBody);
            req.end();
          };

  CustomResourceHelperRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: Allow
                Action:
                  - "s3:ListBucket"
                  - "s3:PutObject"
                Resource:
                  - !Sub "arn:aws:s3:::${DataS3Bucket}"
                  - !Sub "arn:aws:s3:::${DataS3Bucket}/*"
              -
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutDestination
                  - logs:PutLogEvents
                Resource:
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"
